#+TITLE: PPPack.jl examples
#+AUTHOR: Stefanos Carlstr√∂m
#+EMAIL: stefanos.carlstrom@gmail.com
#+PROPERTY: header-args:julia :session *pppack:jl*

* Setup
  #+BEGIN_SRC julia :exports code
    using PPPack
  #+END_SRC

  #+RESULTS:
  : nothing

  #+BEGIN_SRC julia :exports none
    using PyPlot
    matplotlib[:style][:use]("ggplot")
  #+END_SRC

  #+RESULTS:
  : nothing

* xex1
  First, we set up the knot set:
  #+BEGIN_SRC julia :exports code
    t = Float32[0.,0,0,1,1,3,4,6,6,6]
    n = 7
    k = 3
  #+END_SRC

  #+RESULTS:
  : 3

  #+BEGIN_SRC julia :exports both
    nint = length(unique(t))
    "$(nint) intervals"
  #+END_SRC

  #+RESULTS:
  : 5 intervals

  We then set up the grid:
  #+BEGIN_SRC julia :exports code
    x = linspace(t[k],t[end],31)
    values = zeros(Float32,(length(x),nint)) # Storage for the B-splines
  #+END_SRC

  #+RESULTS:
  : 0

  Temporary/accessory variables:
  #+BEGIN_SRC julia :exports code
    biatx = zeros(Float32, n) # Temporary storage
    left = 0 # Holds left point of interval currently considered
    mflag = 0 # Non-zero indicates outside domain
  #+END_SRC

  #+RESULTS:
  : 0

  Find the values of all B-splines for all values of =x=:
  #+BEGIN_SRC julia :exports code
    for i in eachindex(x)
        # locate x[i] with respect to knot array t
        left,mflag = interv(t,n+1,x[i],left,mflag)
        leftmk = left - k
        # get b(i,k)(x) in biatx[i], i=1,...,n.  k of these,
        # viz.  b(left-k+1,k)(x), ..., b(left,k)(x),  are supplied by
        # bsplvb. all others are known to be zero a priori.
        sel = left + (-k+1:0)
        bsplvb(t, k, 1, x[i], left, view(biatx, sel))
        values[i,:] = biatx[k:end]
        biatx[sel] = 0
    end
  #+END_SRC

  #+RESULTS:
  : nothing

  For comparison, we run the [[https://github.com/jagot/pppack/blob/master/examples/xex1.f][xex1.f]] example from the original
  distribution, and capture its output:
  #+BEGIN_SRC julia :exports both
    xex1data = readdlm(IOBuffer(readstring(PPPack.example("xex1"))), skipstart = 1)
  #+END_SRC

  #+RESULTS:
  |   0 |         0 |         0 |         0 |         0 |         0 |
  | 0.2 |      0.04 |         0 |         0 |         0 |         0 |
  | 0.4 |      0.16 |         0 |         0 |         0 |         0 |
  | 0.6 |      0.36 |         0 |         0 |         0 |         0 |
  | 0.8 |      0.64 |         0 |         0 |         0 |         0 |
  |   1 |         1 |         0 |         0 |         0 |         0 |
  | 1.2 | 0.8099999 | 0.1833334 | 0.0066667 |         0 |         0 |
  | 1.4 |      0.64 | 0.3333333 | 0.0266667 |         0 |         0 |
  | 1.6 |      0.49 |      0.45 |      0.06 |         0 |         0 |
  | 1.8 |      0.36 | 0.5333333 | 0.1066667 |         0 |         0 |
  |   2 |      0.25 | 0.5833334 | 0.1666667 |         0 |         0 |
  | 2.2 |      0.16 |       0.6 |      0.24 |         0 |         0 |
  | 2.4 |      0.09 | 0.5833333 | 0.3266667 |         0 |         0 |
  | 2.6 |      0.04 | 0.5333332 | 0.4266667 |         0 |         0 |
  | 2.8 |      0.01 |      0.45 |      0.54 |         0 |         0 |
  |   3 |         0 | 0.3333333 | 0.6666667 |         0 |         0 |
  | 3.2 |         0 | 0.2133333 | 0.7733334 | 0.0133333 |         0 |
  | 3.4 |         0 |      0.12 | 0.8266667 | 0.0533334 |         0 |
  | 3.6 |         0 | 0.0533333 | 0.8266666 | 0.1200001 |         0 |
  | 3.8 |         0 | 0.0133333 | 0.7733334 | 0.2133333 |         0 |
  |   4 |         0 |         0 | 0.6666667 | 0.3333333 |         0 |
  | 4.2 |         0 |         0 | 0.5399998 | 0.4500001 |      0.01 |
  | 4.4 |         0 |         0 | 0.4266666 | 0.5333334 |      0.04 |
  | 4.6 |         0 |         0 | 0.3266667 | 0.5833333 |      0.09 |
  | 4.8 |         0 |         0 | 0.2399999 |       0.6 | 0.1600001 |
  |   5 |         0 |         0 | 0.1666667 | 0.5833334 |      0.25 |
  | 5.2 |         0 |         0 | 0.1066666 | 0.5333332 | 0.3600002 |
  | 5.4 |         0 |         0 |      0.06 |      0.45 | 0.4900001 |
  | 5.6 |         0 |         0 | 0.0266667 | 0.3333334 | 0.6399999 |
  | 5.8 |         0 |         0 | 0.0066667 | 0.1833332 | 0.8100002 |
  |   6 |         0 |         0 |         0 |         0 |         1 |

  The upper panel is calculated using PPPack.jl, the lower panel using
  =xex1.f=. Luckily, they agree.
  #+BEGIN_SRC julia :exports results :results file
    figure("xex1")
    clf()
    subplot(211)
    plot(x,values, ".-")
    grid(true)
    ylabel("PPPack.jl")
    gca()[:set_xticklabels]([])

    subplot(212)
    plot(x,values, ".-")
    grid(true)
    ylabel("xex1.f")

    xlabel(L"x")

    tight_layout()

    savefig("xex1.png", dpi=150)
    "xex1.png"
  #+END_SRC

  #+RESULTS:
  [[file:xex1.png]]

  #+BEGIN_SRC julia :exports none
    t = Float32[0.,0,0,1,1,3,4,6,6,6]
    n = 7
    k = 3
    nint = length(unique(t))

    x = linspace(t[k],t[end],301)
    values = zeros(Float32,(length(x),nint)) # Storage for the B-splines
    biatx = zeros(Float32, n) # Temporary storage
    left = 0 # Holds left point of interval currently considered
    mflag = 0 # Non-zero indicates outside domain

    for i in eachindex(x)
        left,mflag = interv(t,n+1,x[i],left,mflag)
        leftmk = left - k
        sel = left + (-k+1:0)
        bsplvb(t, k, 1, x[i], left, view(biatx, sel))
        values[i,:] = biatx[k:end]
        biatx[sel] = 0
    end

    figure("xex1 hi")
    clf()
    plot(x,values)
    grid(true)
    xlabel(L"x")
    ylabel(L"B_i(x)")
    tight_layout()

    savefig("xex1-hi.png", dpi=150)
  #+END_SRC

  #+RESULTS:
  : nothing
